// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'response', 'responselist', 'responseview', 'pusher'], function(Backbone, Response, ResponseList, ResponseView, Pusher) {
    var ResponseListView;
    return ResponseListView = (function(_super) {

      __extends(ResponseListView, _super);

      function ResponseListView() {
        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);
        return ResponseListView.__super__.constructor.apply(this, arguments);
      }

      ResponseListView.prototype.tagName = "tbody";

      ResponseListView.prototype.el = $("#responselist");

      ResponseListView.prototype.initialize = function() {
        this.collection = new ResponseList();
        this.collection.fetch();
        this.collection.on('reset', this.render);
        window.collection = this.collection;
        this.views = new Array();
        return this.initializePusher();
      };

      ResponseListView.prototype.initializePusher = function() {
        var channel, pusher,
          _this = this;
        pusher = new Pusher('fcae1137cc539c41993f');
        channel = pusher.subscribe('responses');
        return channel.bind('textresponse', function(response) {
          return _this.addNewResponse(response.from, response.message);
        });
      };

      ResponseListView.prototype.render = function() {
        this.$el.empty();
        _.each(this.views, function(view) {
          view.remove();
          return this.views = [];
        }, this);
        _.each(this.collection.models, function(response) {
          var view;
          view = new ResponseView({
            model: response
          });
          this.$el.append(view.el);
          return this.views.push(view);
        }, this);
        return this;
      };

      ResponseListView.prototype.addNewResponse = function(name, message) {
        var response, view;
        response = new Response({
          name: name,
          message: message
        });
        view = new ResponseView({
          model: response
        });
        this.collection.add(response);
        this.views.push(view);
        return this.$el.prepend(view.el);
      };

      return ResponseListView;

    })(Backbone.View);
  });

}).call(this);
